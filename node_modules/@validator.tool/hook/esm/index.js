import _extends from "@babel/runtime/helpers/extends";
import { useEffect, useState, useRef } from 'react';
import Validator from 'validator.tool';
export * from 'validator.tool';
export function useValidator(props) {
  if (props === void 0) {
    props = {};
  }

  var validator = useRef(new Validator(_extends({}, props)));
  var [upState, forceUpdate] = useState(0);
  useEffect(() => {
    if (validator.current && props.form) {
      validator.current.setForm(props.form);
    }
  }, [props.form, validator.current]);

  var handleForceUpdate = () => forceUpdate(upState + 1);

  var handleSubmit = handle => evn => {
    evn && evn.preventDefault();
    validator.current.showMessages();
    forceUpdate(upState + 1);

    if (handle) {
      var _valid = validator.current.allValid();

      handle(_extends({}, validator.current.values), _valid);
    }
  };

  var handleReset = handle => evn => {
    validator.current.hideMessages();
    var val = validator.current.reset();
    handle && handle(val);
  };

  return {
    validator: validator.current,
    forceUpdate: handleForceUpdate,

    /** Only `Form` Support */
    handleSubmit,

    /** Only `Form` Support */
    handleReset
  };
}
//# sourceMappingURL=index.js.map