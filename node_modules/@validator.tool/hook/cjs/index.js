"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  useValidator: true
};
exports.useValidator = useValidator;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _react = require("react");

var _validator = _interopRequireWildcard(require("validator.tool"));

Object.keys(_validator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _validator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _validator[key];
    }
  });
});

function useValidator() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var validator = (0, _react.useRef)(new _validator["default"]((0, _objectSpread2["default"])({}, props)));

  var _useState = (0, _react.useState)(0),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      upState = _useState2[0],
      forceUpdate = _useState2[1];

  (0, _react.useEffect)(function () {
    if (validator.current && props.form) {
      validator.current.setForm(props.form);
    }
  }, [props.form, validator.current]);

  var handleForceUpdate = function handleForceUpdate() {
    return forceUpdate(upState + 1);
  };

  var handleSubmit = function handleSubmit(handle) {
    return function (evn) {
      evn && evn.preventDefault();
      validator.current.showMessages();
      forceUpdate(upState + 1);

      if (handle) {
        var _valid = validator.current.allValid();

        handle((0, _objectSpread2["default"])({}, validator.current.values), _valid);
      }
    };
  };

  var handleReset = function handleReset(handle) {
    return function (evn) {
      validator.current.hideMessages();
      var val = validator.current.reset();
      handle && handle(val);
    };
  };

  return {
    validator: validator.current,
    forceUpdate: handleForceUpdate,

    /** Only `Form` Support */
    handleSubmit: handleSubmit,

    /** Only `Form` Support */
    handleReset: handleReset
  };
}
//# sourceMappingURL=index.js.map