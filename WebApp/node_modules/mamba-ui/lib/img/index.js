"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var React = _interopRequireWildcard(require("react"));

var _classnames3 = _interopRequireDefault(require("classnames"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _cloneDeep = _interopRequireDefault(require("lodash/cloneDeep"));

var _getComponentProps3 = _interopRequireDefault(require("../_utils/getComponentProps"));

var _imgViewer = _interopRequireDefault(require("../img-viewer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var defaultEmptyImageSrc = '';
var defaultErrorImageSrc = '';
var defaultEmptyText = '暂无封面';
var defaultErrorText = '图片出错';

function setImageConfig(options) {
  var emptyImageSrc = options.emptyImageSrc,
      errorImageSrc = options.errorImageSrc,
      emptyText = options.emptyText,
      errorText = options.errorText;

  if (emptyImageSrc !== undefined) {
    defaultEmptyImageSrc = emptyImageSrc;
  }

  if (errorImageSrc !== undefined) {
    defaultErrorImageSrc = errorImageSrc;
  }

  if (emptyText !== undefined) {
    defaultEmptyText = emptyText;
  }

  if (errorText !== undefined) {
    defaultErrorText = errorText;
  }
}

var Img =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Img, _React$Component);

  function Img(props) {
    var _this;

    _classCallCheck(this, Img);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Img).call(this, props));
    _this.emptyImageSrc = props.emptyImageSrc === undefined ? defaultEmptyImageSrc : props.emptyImageSrc;
    _this.errorImageSrc = props.errorImageSrc === undefined ? defaultErrorImageSrc : props.errorImageSrc;
    _this.state = {
      src: props.src || _this.emptyImageSrc,
      showErrorImage: false,
      showErrorTips: false,
      viewerVisible: false,
      hasClickEvent: !!props.src
    }; // errorImageSrc URL是否存在问题

    _this.hasErrorImageEorror = true;

    if (!!_this.errorImageSrc) {
      var that = _assertThisInitialized(_this);

      var errorImg = new Image();
      errorImg.src = _this.errorImageSrc;

      errorImg.onload = function () {
        that.hasErrorImageEorror = false;
        errorImg = null;
      };
    } // 缩略图


    _this.hasThumb = !!props.thumb;
    _this.onError = _this.onError.bind(_assertThisInitialized(_this));
    _this.renderImgNode = _this.renderImgNode.bind(_assertThisInitialized(_this));
    _this.onImgClick = _this.onImgClick.bind(_assertThisInitialized(_this));
    _this.renderImageViewer = _this.renderImageViewer.bind(_assertThisInitialized(_this));
    _this.onViewerClose = _this.onViewerClose.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Img, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var src = this.props.src;
      var prevSrc = prevProps.src;

      if (!(0, _isEqual["default"])(src, prevSrc)) {
        this.setState({
          src: src || this.emptyImageSrc,
          hasClickEvent: !!src,
          showErrorImage: false,
          showErrorTips: false
        });
      }
    } // 图片出错

  }, {
    key: "onError",
    value: function onError() {
      // 取消点击事件
      this.setState({
        hasClickEvent: false
      });
      var errorImageSrc = this.errorImageSrc; // 若已显示图片出错图像的URL，此URL亦存在问题，则跳过显示默认样式

      if (!!errorImageSrc && !this.hasErrorImageEorror) {
        // errorImageSrc 不为空，则替换 src 为 errorImageSrc
        this.setState({
          src: errorImageSrc,
          showErrorImage: true
        });
      } else {
        // 显示默认样式
        this.setState({
          showErrorTips: true
        });
      }
    } // 图片点击

  }, {
    key: "onImgClick",
    value: function onImgClick() {
      this.setState({
        viewerVisible: true
      }); // 回调

      if ((0, _isFunction["default"])(this.props.onClick)) {
        this.props.onClick();
      }
    } // 关闭画廊

  }, {
    key: "onViewerClose",
    value: function onViewerClose() {
      this.setState({
        viewerVisible: false
      });
    } // 查看

  }, {
    key: "renderImageViewer",
    value: function renderImageViewer(_ref) {
      var allowView = _ref.allowView,
          viewer = _ref.viewer;

      if (!allowView) {
        return null;
      }

      var _this$props = this.props,
          src = _this$props.src,
          _this$props$title = _this$props.title,
          title = _this$props$title === void 0 ? '' : _this$props$title,
          _this$props$alt = _this$props.alt,
          alt = _this$props$alt === void 0 ? '' : _this$props$alt;

      var _getComponentProps = (0, _getComponentProps3["default"])(viewer),
          photo = _getComponentProps.photo;

      var newPhoto = photo; // 若未配置photo，则默认使用Iamge src展示

      if (!photo) {
        newPhoto = {
          id: src,
          name: title || alt
        };
      }

      return React.createElement(_imgViewer["default"], _extends({
        photo: newPhoto
      }, viewer, {
        visible: this.state.viewerVisible,
        onClose: this.onViewerClose
      }));
    }
  }, {
    key: "renderImgNode",
    value: function renderImgNode() {
      var _this$state = this.state,
          src = _this$state.src,
          showErrorImage = _this$state.showErrorImage,
          showErrorTips = _this$state.showErrorTips,
          hasClickEvent = _this$state.hasClickEvent;

      var _a = this.props,
          prefixCls = _a.prefixCls,
          className = _a.className,
          style = _a.style,
          thumb = _a.thumb,
          _a$emptyText = _a.emptyText,
          emptyText = _a$emptyText === void 0 ? defaultEmptyText : _a$emptyText,
          _a$errorText = _a.errorText,
          errorText = _a$errorText === void 0 ? defaultErrorText : _a$errorText,
          onClick = _a.onClick,
          rest = __rest(_a, ["prefixCls", "className", "style", "thumb", "emptyText", "errorText", "onClick"]);

      var restClone = (0, _cloneDeep["default"])(rest);
      delete restClone.src;
      delete restClone.errorImageSrc;
      delete restClone.emptyImageSrc;
      var imgProps = Object.assign({
        src: src,
        className: className,
        style: style,
        onClick: onClick,
        onError: this.onError
      }, restClone);
      showErrorImage && (imgProps = Object.assign(Object.assign({}, imgProps), {
        'data-error': rest.src
      })); // 默认展示

      var node = React.createElement("img", imgProps); // 缩略图模式 | 此模式下支持放大查看

      if (this.hasThumb) {
        var _getComponentProps2 = (0, _getComponentProps3["default"])(thumb),
            backgroundColor = _getComponentProps2.backgroundColor,
            _getComponentProps2$a = _getComponentProps2.allowView,
            allowView = _getComponentProps2$a === void 0 ? false : _getComponentProps2$a,
            viewer = _getComponentProps2.viewer; // 行内样式


        var _style;

        if (backgroundColor) {
          _style = {
            backgroundColor: backgroundColor
          };
        } // class


        var isAllow = allowView && hasClickEvent;
        var thumbCls = (0, _classnames3["default"])("".concat(prefixCls, "-thumb"), _defineProperty({}, "".concat(prefixCls, "-view"), isAllow)); // 允许查看

        if (isAllow) {
          imgProps = Object.assign(Object.assign({}, imgProps), {
            onClick: this.onImgClick
          });
        }

        node = React.createElement("div", {
          className: thumbCls,
          style: _style
        }, React.createElement("img", imgProps), this.renderImageViewer({
          allowView: isAllow,
          viewer: viewer
        }));
      }

      if (!src || showErrorTips) {
        var _classnames2;

        var cls = (0, _classnames3["default"])(className, (_classnames2 = {}, _defineProperty(_classnames2, "".concat(prefixCls, "-nodata"), !src), _defineProperty(_classnames2, "".concat(prefixCls, "-error"), showErrorTips), _classnames2)); // src|emptyImageSrc 都为空，提供默认样式

        if (!src) {
          node = React.createElement("div", {
            className: cls,
            style: style
          }, React.createElement("p", null, emptyText));
        } // src资源出错，errorImageSrc为空，提供默认样式


        if (showErrorTips) {
          node = React.createElement("div", {
            className: cls,
            style: style,
            "data-error": src
          }, React.createElement("p", null, errorText), React.createElement("img", {
            src: src,
            className: "".concat(prefixCls, "-error-img-hid")
          }));
        }
      }

      return node;
    }
  }, {
    key: "render",
    value: function render() {
      return this.renderImgNode();
    }
  }]);

  return Img;
}(React.Component);

exports["default"] = Img;
Img.defaultProps = {
  prefixCls: 'ember-image',
  thumb: false
};
Img.config = setImageConfig;
//# sourceMappingURL=index.js.map
